---
swagger: "2.0"
info:
  description: "This is a Boostcamp REST API."
  version: "1.0.0"
  title: "Boostcamp Team E.T. REST API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "wjddnwls918@naver.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "http://54.180.113.135"
basePath: "/v2"
tags:
- name: "More Info"
  description: "this is our project -> "
  externalDocs:
    description: "Find out more"
    url: "https://github.com/boostcampth/boostcamp3_D"
schemes:
- "https"
- "http"

## API DOCUMENT
paths:
  /board:
    get:
      tags:
      - "board"
      summary: "All of the board"
      description: "get all of the board list"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 13 */
    post:
      /board:
      tags:
      - "board"
      summary: "User create board"
      description: ""
      parameters:
        - in : body
          name: "board add"
          description: "input board info"
          schema:
            type: object
            required:
              - title
              - address
              - appointed_time
              - restaurant_name
              - max_person
              - writer_id
              - min_age
              - max_age
              - budget
              - content
              - longitude
              - latitude
              - writer_photo
              - writer_name
            properties:
              title:
                type: string
              address:
                type: string
              appointed_time:
                type: string
              restaurant_name:
                type: string
              max_person:
                type: integer
              writer_id:
                type: integer
              min_age:
                type: integer
              max_age:
                type: integer
              budget:
                type: integer
              content:
                type: string
              longitude:
                type: number
                format: double
              latitude:
                type: number
                format: double
              writer_photo:
                type: string
              writer_name:
                type: string
      responses:
        200:
          description: "success"
        400:
          description: "error"

  /comment:
    get:
      tags:
      - "comment"
      summary: "All of the comment"
      description: "get all of the comment list"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

  /fcmtoken:
    get:
      tags:
      - "fcmtoken"
      summary: "All of the fcmtoken"
      description: "get all of the fcmtoken list"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

  /user:
    get:
      tags:
      - "user"
      summary: "All of the user"
      description: "get all of the user list"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

# /* 4 */
    post:
      /user:
      tags:
      - "user"
      summary: "Input login user info"
      consumes:
        - application/json
      parameters:
        - in: body
          name: "user info"
          description: "input login user info"
          schema:
            type: object
            required:
              - kakao_id
              - nick_name
              - sex
              - age
              - photo
            properties:
              kakao_id:
                type: integer
              nick_name:
                type: string
              sex:
                type: integer
              age:
                type: integer
              photo:
                type: string
      responses:
        200:
          description: "success"
        400:
          description: "error"


  /participation:
    get:
      tags:
      - "participation"
      summary: "All of the participation"
      description: "get all of the participation list"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

# /* 1 */
  /board/today:
    get:
      tags:
      - "board"
      summary: "Get today board list"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

# /* 2 */
  /user/info:
    get:
      tags:
      - "user"
      summary: "Get current login user info"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          shema:
            type: integer
            required: true
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /user:

# /* 5 */
  /home/ranking/me:
    get:
      tags:
      - "ranking"
      summary: "Get user ranking"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          shema:
            type: integer
            required: true
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"
# /* 6 */
  /home/board:
    get:
      tags:
      - "board"
      summary: "Get board close to user"
      description: ""
      parameters:
        - in : query
          name: longitude
          shema:
            type: double
        - in : query
          name: latitude
          schema:
            type: double
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"
# /* 7 */
  /home/ranking/user:
    get:
      tags:
      - "user"
      summary: "Top 10 ranker"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 8 */
  /map/list:
    get:
      tags:
      - "board"
      summary: "Board list in map area"
      description: ""
      parameters:
        - in : query
          name: left_longitude
          shema:
            type: double
        - in : query
          name: left_latitude
          schema:
            type: double
        - in : query
          name: right_longitude
          shema:
            type: double
        - in : query
          name: right_latitude
          shema:
            type: double
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 9 */
  /board/participation:
    post:
      tags:
      - "participation"
      summary: "User participate selected board"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          required: true
          shema:
            type: integer
        - in : body
          name: "participation info"
          description: "input board_id"
          required: true
          schema:
            type: object
            required:
              - board_id
            properties:
              board_id:
                type: integer
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 10 */
  /search/list:
    get:
      tags:
      - "board"
      summary: "Get board list user searched"
      description: ""
      parameters:
        - in : query
          name: keyword
          shema:
            type: string
        - in : query
          name: min_time
          schema:
            type: integer
        - in : query
          name: max_time
          shema:
            type: integer
        - in : query
          name: min_age
          shema:
            type: integer
        - in : query
          name: max_age
          shema:
            type: integer
        - in : query
          name: budget
          shema:
            type: integer
        - in : query
          name: max_person
          shema:
            type: integer
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 11 */
  /board/list/my:
    get:
      tags:
      - "board"
      summary: "Get user created board"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          shema:
            type: integer
            required: true
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 12 */
  /board/list/participation:
    get:
      tags:
      - "board"
      summary: "Get user participated board"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          shema:
            type: integer
            required: true
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"


#  /* 14 */
  /board/comment:
    get:
      tags:
      - "comment"
      summary: "Get board comment"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          required: true
          shema:
            type: integer
        - in : query
          name: board_id
          required: true
          schema:
            type: integer
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 15 */
    post:
      /board/comment:
      tags:
      - "comment"
      summary: "User add comment"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          required: true
          shema:
            type: integer
        - in : header
          name: token
          required: true
          shema:
            type: integer
        - in : body
          name: "comment add info"
          description: "input board_id and content"
          required: true
          schema:
            type: object
            required:
              - board_id
              - content
            properties:
              board_id:
                type: integer
              content:
                type: string
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 16 */
  /mypage/judge:
    put:
      tags:
      - "user"
      summary: "User's score evaluate"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          shema:
            type: integer
            required: true
        - in : header
          name: token
          shema:
            type: integer
            required: true
        - in : body
          name: "evaluate user score"
          description: "input writer_id, board_id(existed board) and score(2 or 3 or 5)"
          schema:
            type: object
            required:
              - writer_id
              - board_id
              - score
            properties:
              writer_id:
                type: integer
              board_id:
                type: integer
              score:
                type: integer
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 19 */
    get:
      /mypage/judge:
      tags:
      - "user"
      summary: "Get board list for evaluation"
      description: ""
      parameters:
        - in : header
          name: kakao_id
          required: true
          shema:
            type: integer
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "success"
        400:
          description: "error"


#  /* 17 */
  /mypage/{nick_name}:
    put:
      tags:
      - "mypage"
      summary: "User's info edit"
      description: ""
      parameters:
        - in : path
          name: nick_name
          required: true
          schema:
            type: string
        - in : body
          name: "user info"
          description: "input nick_name, age, sex and photo"
          required: true
          schema:
            type: object
            required:
              - nick_name
              - age
              - sex
              - photo
            properties:
              nick_name:
                type: string
              age:
                type: integer
              sex:
                type: integer
              photo:
                type: string
      responses:
        200:
          description: "success"
        400:
          description: "error"

#  /* 20 */
  /fcm/token:
    post:
      tags:
      - "fcmtoken"
      summary: "add fcmtoken"
      description: ""
      parameters:
        - in : header
          name: token
          required: true
          shema:
            type: integer
      responses:
        200:
          description: "success"
        400:
          description: "error"




securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

#start of definitions
definitions:
  board:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        nullable: false
      address:
        type: "string"
        nullable: false
      title:
        type: "string"
        nullable: false
      appointed_time:
        type: "string"
        format: "date-time"
        nullable: false
      max_person:
        type: "integer"
        nullable: false
      current_person:
        type: "integer"
        default: 1
        nullable: false
      restaurant_name:
        type: "string"
        nullable: false
      writer_id:
        type: "integer"
        nullable: false
      write_date:
        type: "string"
        format: "date-time"
        nullable: false
      validation:
        type: "integer"
        nullable: false
        default : 0
      content:
        type: "string"
        nullable: false
      expire_date:
        type: "string"
        format: "date-time"
        nullable: true
      longitude:
        type: "double"
        nullable: false
      latitude:
        type: "double"
        nullable: false
      budget:
        type: "integer"
        nullable: false
      min_age:
        type: "integer"
        nullable: false
      max_age:
        type: "integer"
        nullable: false
      writer_photo:
        type: "string"
        nullable: true
      writer_name:
        type: "string"
        nullable: false
    xml:
      name: "board"
    example:
      address:
      title: "hello"
      appointed_time: "2000-01-23T04:56:07.000+00:00"
      max_person: 6
      restaurant_name: "강남구 역삼동"
      writer_id: 10181111
      write_date: "2000-01-23T04:56:07.000+00:00"
      validation: 0
      content: "모여라 역삼"
      longitude: 127
      latitude: 36
      budget: "50000"
      min_age: 15
      max_age: 80
      writer_photo: "adsfasasdas@naver.com/"
      writer_name: "코봉이"
  comment:
    type: "object"
    properties:
      id:
        type: "integer"
        nullable : false
      kakao_id:
        type: "integer"
        format: "int64"
        nullable: false
      board_id:
        type: "integer"
        nullable: false
      write_time:
        type: "string"
        format: "date-time"
        nullable: false
      content:
        type: "string"
        nullable: false
    xml:
      name: "comment"
    example:
      name: "name"
      id: 6
  participation:
    type: "object"
    properties:
      id:
        type: "integer"
        nullable : false
      user_id:
        type: "integer"
        nullable: false
      join_time:
        type: "string"
        format: "date-time"
        nullable: false
      board_id:
        type: "integer"
        nullable: false
      isEvaluated:
        type: "boolean"
        nullable: false
        default: false
    xml:
      name: "participation"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
  user:
    type: "object"
    properties:
      id:
        type: "integer"
        nullable : false
      nick_name:
        type: "string"
        nullable: false
      age:
        type: "integer"
        nullable: false
      sex:
        type: "integer"
        nullable: false
      photo:
        type: "string"
        nullable: false
      join_date:
        type: "string"
        format: "date-time"
        nullable: true
      score_normal:
        type: "integer"
        nullable: false
        default: 0
      score_good:
        type: "integer"
        nullable: false
        default: 0
      score_great:
        type: "integer"
        nullable: false
        default: 0
      score_sum:
        type: "integer"
        nullable: false
        default: 0
      kakao_id:
        type: "integer"
        format: "int64"
        nullable: false
        default: false
    xml:
      name: "user"
    example:
      name: "name"
      id: 1
  fcmtoken:
    type: "object"
    properties:
      id:
        type: "integer"
        nullable : false
      token:
        type: "string"
        nullable: false
    xml:
      name: "fcmtoken"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
